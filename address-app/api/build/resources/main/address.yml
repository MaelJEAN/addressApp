openapi: "3.0.0"
info:
  version: 1.0.0
  title: Mines - address app
  license:
    name: MIT
servers:
  - url: http://localhost:8080
paths:
  /town:
    get:
      summary: List all towns
      operationId: listTowns
      tags:
        - town
      responses:
        '200':
          description: An array of towns
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Town'
    post:
      summary: Create a town
      operationId: createTown
      tags:
        - town
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Town'
      responses:
        '201':
          description: Null response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Town'
    put:
      summary: Update a town
      operationId: updateTown
      tags:
        - town
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Town'
      responses:
        '200':
          description: Null response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Town'
  /town/{id}:
    get:
      summary: Info for a specific town
      operationId: getTown
      tags:
        - town
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the town to retrieve
          schema:
            type: string
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Town"
    delete:
      tags:
        - town
      summary: Delete a town.
      operationId: deleteTown
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        '204':
          description: Town has been deleted.
          content:
            application/json:
              schema:
                type: string
                description: ID of the deleted entity.

  /town/{id}/address:
    get:
      summary: Retrieves all addresses for a given town
      operationId: listAddresses
      tags:
        - address
      parameters:
        - name: id
          in: path
          required: true
          description: The town id
          schema:
            type: string
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Address"
    post:
      summary: Creates an address
      operationId: createAddresses
      tags:
        - address
      parameters:
        - name: id
          in: path
          required: true
          description: The town id
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Address'
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Address"

  /person:
    get:
      summary: List all persons
      operationId: listPersons
      tags:
        - person
      responses:
        '200':
          description: An array of persons
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Person'
    post:
      summary: Create a person
      operationId: createPerson
      tags:
        - person
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Person'
      responses:
        '201':
          description: Null response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
    put:
      summary: Update a person
      operationId: updatePerson
      tags:
        - person
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Person'
      responses:
        '200':
          description: Null response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
  /person/{id}:
    get:
      summary: Info for a specific person
      operationId: getPerson
      tags:
        - person
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the person to retrieve
          schema:
            type: string
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Person"
    delete:
      tags:
        - person
      summary: Delete a person.
      operationId: deletePerson
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        '204':
          description: Person has been deleted.
          content:
            application/json:
              schema:
                type: string
                description: ID of the deleted entity.



components:
  schemas:
    Town:
      required:
        - name
        - postCode
      properties:
        id:
          type: string
        name:
          type: string
        postCode:
          type: string
    Address:
      required:
        - street
        - number
      properties:
        number:
          type: integer
          format: int64
        street:
          type: string
    Person:
      required:
        - firstName
        - lastName
        - age
        - gender
      properties:
        id:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        age:
          type: integer
          format: int32
        gender:
          type: string